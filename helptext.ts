/**
 * helptext.ts - this modules provides the help text displayed with the help option.
 *
 *  Copyright (C) 2025  R. S. Doiel
 *
 *  This program is free software: you can redistribute it and/or modify
 *  it under the terms of the GNU Affero General Public License as
 *  published by the Free Software Foundation, either version 3 of the
 *  License, or (at your option) any later version.
 *
 *  This program is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU Affero General Public License for more details.
 *
 *  You should have received a copy of the GNU Affero General Public License
 *  along with this program.  If not, see <https://www.gnu.org/licenses/>.
 */
export function fmtHelp(
  txt: string,
  appName: string,
  version: string,
  releaseDate: string,
  releaseHash: string,
): string {
  return txt.replaceAll("{app_name}", appName).replaceAll("{version}", version)
    .replaceAll("{release_date}", releaseDate).replaceAll(
      "{release_hash}",
      releaseHash,
    );
}

// CommonMark help text
export const helpText =
  `%{app_name}(1) user manual | version {version} {release_hash}
% R. S. Doiel
% {release_date}

# NAME

{app_name}

# SYNOPSIS

{app_name} [OPTIONS] JSON_API_PATH

# DESCRIPTION

{app_name} reads transforming the JSON API generated by [FlatLake](https://flatlake.app)
into RSS 2.0 XML. This program is a proof of concept of how you might integrate FlatLake
into your static website build process.

# OPTIONS

Options come as the last parameter(s) on the command line.

-h, --help
: display help

-v, --version
: display version

-l, --license
: display license

# EXAMPLE

Here's is an example of the FlatLake configuration file for generating the JSON API

~~~yaml
global:
  outputs:
    - "list"
collections:
  - output_key: "posts"
    page_size: 24
    sort_key: "datePublished"
    sort_direction: "desc"
    list_elements:
      - "data"
      - "content"
    inputs:
      - path: "./blog"
        glob: "**/*{md}"
~~~

The "posts" data then can be used to generate the RSS output. Here's the example
of using FlatLake and {app_name} to render "rss.xml".

~~~shell
flatlake
{app_name} api/posts/all/page-1.json >rss.xml
~~~

`;
